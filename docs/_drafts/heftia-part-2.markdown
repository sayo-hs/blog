---
title:  "Heftia: The Next Generation of Haskell Effects Management - Part 2"
author: riyo
date:   2025-05-17 03:32:00 +0900
categories:
  - heftia
tags:
  - heftia
excerpt: |
---

まず最初に、前回のパートでは`heftia`と他のエフェクトシステムの比較において曖昧な表現が多く、またその根拠が十分に示されていなかったことについて謝罪いたします。
前回の記事の不足のいくつかをここで補います。完全な補足ではないことをご了承ください。

# 代数的エフェクトの定義

代数的エフェクトは巷でバズワードのように扱われている所があります。

本シリーズでは、代数的エフェクトという用語を一貫して、
Gordon D. Plotkin 及び Matija Pretnar による文献上で定義される操作的意味論及び型付け規則の意味で用います。

https://www.researchgate.net/publication/259151378_Handling_Algebraic_Effects
https://www.sciencedirect.com/science/article/pii/S1571066115000705

さらに、「代数的エフェクトを（Haskellで）実現する」というとき、
代数的エフェクトの操作的意味論及び型付け規則を完全な形で、
Haskell上の各種言語機能を用いて埋め込むことでエミュレート可能にするということを意味します。

代数的エフェクトには、Haskellが以前より実現している高階エフェクトの機能が含まれていません。
これは専門的には、論文2の図3で示されている代数的エフェクトの操作的意味論の、オペレーションがハンドルされる際のリレーションにおいて、operationの引数`v`に対しては`with h handle`が適用されないことから
判断することができます。
オペレーションの引数は単なる値として扱われ、意味のある形でアクションを含むことができません。

つまり、高階エフェクトは代数的エフェクトに対する拡張機能、もしくはそれぞれを直交する言語機能として見なすことができます。

現在、代数的エフェクトを実現する`Haskell`のライブラリにはFreer/Operationalモナドベースのものがあり、例えば`freer-simple`や`heftia`が該当します。
ここには`fused-effects`, `polysemy`などは含まれません。
それらは限定継続の使用に制限があり、代わりに代数的エフェクトのサブセットを実現します。

# `ReaderT IO`方式の課題について

前回のパートのこの節では、明らかに説明が不足していました。


# `heftia`の現在実装されている並行性機能
